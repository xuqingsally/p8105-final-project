group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2")
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
knitr::kable(head(job_positions, 10))
nyc_jobs %>% select(job_category) %>% n_distinct()
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
?diamonds
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
View(positions_plot)
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
mutate(year = as.numeric(year)) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year)
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar")
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
library(ggplot2)
?diamonds
diamonds
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, color = "Set2", type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
View(job_positions)
job_positions[1,1]
job_positions[[1]]
job_positions[[1]][1]
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
install.packages("wordcloud2")
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
View(parts_of_speech)
bing_sentiments = get_sentiments("bing")
View(bing_sentiments)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech)
View(jobs_words_skill)
View(nyc_jobs)
?inner_join
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)
View(jobs_words_skill)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(15) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(10) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(5) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
job_data=nyc_jobs%>%
select(job_category, salary_range_from, salary_range_to,minimum_qual_requirements,full_time_part_time_indicator,salary_frequency)%>%
filter(job_category!= " ", minimum_qual_requirements!=" ",full_time_part_time_indicator=="F",salary_frequency=="Annual")
x=c("baccalaureate", "Bachelor")
y=c("Master","master")
master_data=filter(job_data,grepl(paste(y, collapse = "|"),minimum_qual_requirements),!grepl(paste(x, collapse = "|"),minimum_qual_requirements))
baccalaureate_data = filter(job_data,grepl(paste(x, collapse = "|"),minimum_qual_requirements),!grepl(paste(y, collapse = "|"),minimum_qual_requirements))
Other_data=filter(job_data,!grepl(paste(y, collapse = "|"),minimum_qual_requirements),!grepl(paste(x, collapse = "|"),minimum_qual_requirements))
master_plot=plot_ly(master_data, y = ~salary_range_from, color = ~job_category, type = "box", colors = "Set2")%>%
layout(title = "Base salary of  jobs required at least master degree")
baccalaureate_plot=plot_ly(baccalaureate_data, y = ~salary_range_from, color = ~job_category, type = "box", colors = "Set2")%>%
layout(title = "Base salary of jobs required at least baccalaureate degree(No need of master's)")
Other_plot=plot_ly(Other_data, y = ~salary_range_from, color = ~job_category, type = "box",
colors = "Set2")%>%
layout(title = "Base salary of different kind of jobs without requirement of degree")
job_data=mutate(job_data, salary_range=salary_range_to-salary_range_from)
plot_ly(job_data, y=~salary_range, x= ~job_category, type="bar")%>%
layout(title = "The wage increasing ranges of different kinds of jobs")
plot_ly(master_data, y = ~salary_range_from, color = ~job_category, type = "box", colors = "Set2")%>%
layout(title = "Base salary of  jobs required at least master degree")
plot_ly(baccalaureate_data, y = ~salary_range_from, color = ~job_category, type = "box", colors = "Set2")%>%
layout(title = "Base salary of jobs required at least baccalaureate degree(No need of master's)")
plot_ly(Other_data, y = ~salary_range_from, color = ~job_category, type = "box",
colors = "Set2")%>%
layout(title = "Base salary of different kind of jobs without requirement of degree")
View(job_data)
nyc_jobs = nyc_jobs%>%
ungroup()%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
wordcloud2(jobs_words_requirement, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
install.packages("wordcloud2")
library(wordcloud2)
install.packages("wordcloud2")
library(wordcloud2)
job_data=nyc_jobs%>%
select(job_category, salary_range_from, salary_range_to,minimum_qual_requirements,full_time_part_time_indicator,salary_frequency)%>%
filter(job_category!= " ", minimum_qual_requirements!=" ",full_time_part_time_indicator=="F",salary_frequency=="Annual")
x=c("baccalaureate", "Bachelor")
y=c("Master","master")
master_data=filter(job_data,grepl(paste(y, collapse = "|"),minimum_qual_requirements),!grepl(paste(x, collapse = "|"),minimum_qual_requirements))
baccalaureate_data = filter(job_data,grepl(paste(x, collapse = "|"),minimum_qual_requirements),!grepl(paste(y, collapse = "|"),minimum_qual_requirements))
Other_data=filter(job_data,!grepl(paste(y, collapse = "|"),minimum_qual_requirements),!grepl(paste(x, collapse = "|"),minimum_qual_requirements))
job_data=nyc_jobs%>%
select(job_category, salary_range_from, salary_range_to,minimum_qual_requirements,full_time_part_time_indicator,salary_frequency)%>%
filter(job_category!= " ", minimum_qual_requirements!=" ",full_time_part_time_indicator=="F",salary_frequency=="Annual")
x=c("baccalaureate", "Bachelor")
y=c("Master","master")
# plotly worldwild
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoieHVxaW5nc2FsbHkiLCJhIjoiY2phZWh0djdyMHUzZTJ3bGR3MHFsdmIzZSJ9.vhYtu7zeAAuX6slhdDj6lA')
p <- nyc_jobs %>%
mutate(text_label = str_c("Annual mean salary$:",salary_mean))
plot_mapbox(p,lat = ~lat, lon = ~lon,
size=2,
split = nyc_jobs$job_category,
mode = 'scattermapbox') %>%
add_markers(
text = ~text_label,
color = ~job_category,size = I(8)) %>%
layout(title = 'Work Location',
font = list(color='white'),
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark'),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 25, r = 25,
b = 25, t = 25,
pad = 2))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoieHVxaW5nc2FsbHkiLCJhIjoiY2phZWh0djdyMHUzZTJ3bGR3MHFsdmIzZSJ9.vhYtu7zeAAuX6slhdDj6lA')
p <- nyc_jobs %>%
mutate(text_label = str_c("Annual mean salary$:",salary_mean))
plot_mapbox(p,lat = ~lat, lon = ~lon,
size=2,
split = nyc_jobs$job_category,
mode = 'scattermapbox') %>%
add_markers(
text = ~text_label,
color = ~job_category,size = I(8)) %>%
layout(title = 'Work Location',
font = list(color='white'),
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark'),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 25, r = 25,
b = 25, t = 25,
pad = 2))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
nyc_jobs<- read.csv("NYC_Jobs.csv")
nyc_job<- read.csv("NYC_Jobs.csv")
nyc_job<- read.csv("NYC_Jobs.csv") %>%
clean_names() %>%
filter(job_category!= " ",
full_time_part_time_indicator!=" ",
preferred_skills!= " ",
work_location!=" ") %>%
head(100)
nyc_job$job_category<- as.character(nyc_job$job_category)
