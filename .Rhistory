ggplot(salary_positions, aes(x = agency, y = positions)) +
geom_col(fill = "blue", alpha = .7) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Number of positions vs. job categories",
x = "Job category",
y = "Number of positions"
)
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency) %>%
group_by(agency) %>%
summarise(positions = sum(x_of_positions)) %>%
mutate(agency = factor(agency),
agency = fct_reorder(agency, positions))
ggplot(salary_positions, aes(x = agency, y = positions)) +
geom_col(fill = "blue", alpha = .7) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Number of positions vs. job categories",
x = "Job category",
y = "Number of positions"
)
try = nyc_jobs %>%
select(agency, x_of_positions, salary_mean, business_title) %>%
group_by(agency, salary_mean)
View(try)
try = nyc_jobs %>%
group_by(agency, salary_mean)
View(try)
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency) %>%
group_by(agency, salary_mean)
View(salary_postions)
View(salary_positions)
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
group_by(agency, salary_mean)
View(salary_positions)
nyc_jobs %>%
plot_ly(y = ~salary_mean, color = ~job_category, type = "box",
colors = "Set2") %>%
layout(title = "Annual average salary distribution in 12 job categories")
library(plotly)
library(stringr)
nyc_jobs %>%
plot_ly(y = ~salary_mean, color = ~job_category, type = "box",
colors = "Set2") %>%
layout(title = "Annual average salary distribution in 12 job categories")
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
filter(!x_of_positions = 1) %>%
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
filter(!x_of_positions == 1) %>%
group_by(agency, salary_mean)
View(salary_positions)
salary_positions %>% select(job_category) %>% n_distinct()
salary_positions %>% select(agency) %>% n_distinct()
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
filter(!x_of_positions == 1) %>%
group_by(agency, salary_mean) %>%
summarise(positions = sum(x_of_positions)) %>%
mutate(agency = factor(agency),
agency = fct_reorder(agency, positions))
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
group_by(agency) %>%
summarise(positions = sum(x_of_positions)) %>%
mutate(agency = factor(agency),
agency = fct_reorder(agency, positions))
ggplot(salary_positions, aes(x = agency, y = positions)) +
geom_col(fill = "blue", alpha = .7) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Number of positions vs. job categories",
x = "Job category",
y = "Number of positions"
)
plot_ly(salary_positions, x = ~agency, y = ~positions, type = "bar",
color = "Set2")
plot_ly(salary_positions, x = ~salary_mean, y = ~positions, type = "scatter",
color = "Set2")
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions))
salary_positions = nyc_jobs %>%
select(x_of_positions, salary_mean, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
mutate(agency = factor(agency),
agency = fct_reorder(agency, positions))
salary_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
top_n(5)
salary_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
top_n(5)
knitr::kable(salary_positions)
?summarise
?top_n
salary_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
top_n(5, positions)
knitr::kable(salary_positions)
salary_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
top_n(5, positions)
View(salary_positions)
salary_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions), order = TRUE)
View(salary_positions)
salary_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
View(salary_positions)
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
knitr::kable(head(job_positions, 10))
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
knitr::kable(head(job_positions, 10))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plotly(x = job_category, y = positions, type = "bar",
color = "Set2")
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2")
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
knitr::kable(head(job_positions, 10))
nyc_jobs %>% select(job_category) %>% n_distinct()
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
?diamonds
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
View(positions_plot)
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
mutate(year = as.numeric(year)) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year)
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar")
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
library(ggplot2)
?diamonds
diamonds
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, color = "Set2", type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
View(job_positions)
job_positions[1,1]
job_positions[[1]]
job_positions[[1]][1]
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
install.packages("wordcloud2")
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
View(parts_of_speech)
bing_sentiments = get_sentiments("bing")
View(bing_sentiments)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech)
View(jobs_words_skill)
View(nyc_jobs)
?inner_join
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)
View(jobs_words_skill)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(15) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(10) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(5) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
