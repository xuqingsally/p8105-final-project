group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2")
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
knitr::kable(head(job_positions, 10))
nyc_jobs %>% select(job_category) %>% n_distinct()
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
job_positions %>%
group_by(job_category) %>%
summarise(positions = sum(positions)) %>%
mutate(job_category = factor(job_category),
job_category = fct_reorder(job_category, positions)) %>%
plot_ly(x = ~job_category, y = ~positions, type = "bar",
color = "Set2") %>%
layout(title = "Number of positions of each job category")
?diamonds
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
View(positions_plot)
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
mutate(year = as.numeric(year)) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year)
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar")
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
library(ggplot2)
?diamonds
diamonds
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, color = "Set2", type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
View(job_positions)
job_positions[1,1]
job_positions[[1]]
job_positions[[1]][1]
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
install.packages("wordcloud2")
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean) %>%
distinct() %>%
group_by(agency, job_category) %>%
summarise(positions = sum(x_of_positions)) %>%
arrange(desc(positions))
# Number of job positions: top 10
knitr::kable(head(job_positions, 10))
positions_plot = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, posting_date) %>%
distinct() %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
plot_ly(positions_plot, x = ~job_category, y = ~positions,
color = ~year, type = "bar") %>%
layout(title = "Number of positions of job categories in each year",
barmode = "group")
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
View(parts_of_speech)
bing_sentiments = get_sentiments("bing")
View(bing_sentiments)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech)
View(jobs_words_skill)
View(nyc_jobs)
?inner_join
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)
View(jobs_words_skill)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech)
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
nyc_jobs = nyc_jobs%>%
mutate(  minimum_qual_requirements = as.character(minimum_qual_requirements))%>%
mutate(preferred_skills = as.character(preferred_skills))
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
filter(word!=1,word!=2,word!=3, word!="芒", word!="鈧",word!="劉")%>%
count(word, sort = TRUE)
jobs_words_skill %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
set.seed(123)
wordcloud2(jobs_words_skill, size = 2,color = 'random-light',
backgroundColor = "gray", fontWeight='bold',
minRotation = -pi/3, maxRotation = pi/3,rotateRatio = 0.8)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill =  nyc_jobs%>%
unnest_tokens(word,preferred_skills)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement =  nyc_jobs%>%
unnest_tokens(word,minimum_qual_requirements)%>%
anti_join(stop_words)%>%
inner_join(., parts_of_speech) %>%
count(word, sort = TRUE)
jobs_words_requirement %>%
top_n(20) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(15) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(10) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
jobs_words_skill %>%
top_n(5) %>%
mutate(word = fct_reorder(word, n)) %>%
plot_ly(y = ~word, x = ~n, color = ~word, type = "bar")
?leaflet
install.packages("leaflet")
?leaflet
??leaflet
knitr::opts_chunk$set(
collapse = TRUE,
fig.width = 6,
fig.asp = .6,
out.width = "90%"
)
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(ggplot2)
library(leaflet)
leaflet() %>%
addTiles() %>%
fitBounds(-74.23,40.58,-73.75,40.87) %>%
addCircleMarkers(nyc_jobs$lon,
nyc_jobs$lat,
color = nyc_jobs$job_category,
radius = 3,
fill = T,
fillOpacity = 0.2,
opacity = 0.6,
popup = paste(nyc_jobs$lon,
nyc_jobs$lat,
sep = ""))
leaflet() %>%
addTiles() %>%
fitBounds(-74.23,40.58,-73.75,40.87) %>%
addCircleMarkers(nyc_jobs$lon,
nyc_jobs$lat,
color = ~factpal(nyc_jobs$job_category),
radius = 2,
fill = T,
fillOpacity = 0.2,
opacity = 0.6,
popup = paste(nyc_jobs$lon,
nyc_jobs$lat,
sep = " "))
library(leaflet)
nyc_jobs$job_category <- ifelse(nyc_jobs$job_category == "Administration", "orange",
ifelse(sites$site.rating == 1, "green",
ifelse(sites$site.rating == 2, "red", "black")))
leaflet() %>%
addTiles() %>%
fitBounds(-74.23,40.58,-73.75,40.87) %>%
addCircleMarkers(nyc_jobs$lon,
nyc_jobs$lat,
color = ~factpal(nyc_jobs$job_category),
radius = 2,
fill = T,
fillOpacity = 0.2,
opacity = 0.6,
popup = paste(nyc_jobs$lon,
nyc_jobs$lat,
sep = " "))
lat_lon = nyc_jobs %>%
filter(!lat == NA, lon == NA)
leaflet() %>%
addTiles() %>%
fitBounds(-74.23,40.58,-73.75,40.87) %>%
addCircleMarkers(lat_lon$lon,
lat_lon$lat,
color = ~factpal(lat_lon$job_category),
radius = 2,
fill = T,
fillOpacity = 0.2,
opacity = 0.6,
popup = paste(lat_lon$lon,
lat_lon$lat,
sep = " "))
lat_lon = nyc_jobs %>%
filter(!lat == "NULL", lon == "NULL")
leaflet() %>%
addTiles() %>%
fitBounds(-74.23,40.58,-73.75,40.87) %>%
addCircleMarkers(lat_lon$lon,
lat_lon$lat,
color = ~factpal(lat_lon$job_category),
radius = 2,
fill = T,
fillOpacity = 0.2,
opacity = 0.6,
popup = paste(lat_lon$lon,
lat_lon$lat,
sep = " "))
lat_lon = nyc_jobs %>%
mutate(job_category = as.factor(job_category))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(shiny)
year = nyc_jobs %>% distinct(year) %>% pull()
nyc_jobs<- read.csv("NYC_Jobs.csv") %>%
clean_names() %>%
filter(job_category!= " ",
full_time_part_time_indicator!=" ",
preferred_skills!= " ",
work_location!=" ") %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day) %>%
head(2500) #google map limited to 2500
nyc_jobs$job_category<- as.character(nyc_jobs$job_category)
nyc_jobs$work_location<-as.character(nyc_jobs$work_location)
geo <- geocode(location = nyc_jobs$work_location, output="latlon", source="google")
year = nyc_jobs %>% distinct(year) %>% pull()
class(nyc_jobs$salary_mean)
View(nyc_jobs)
nyc_jobs=read_csv("job.csv") %>%
separate(posting_date, into = c("year", "month", "day"), sep = "-") %>%
select(-month, -day)
class(nyc_jobs$salary_mean)
View(nyc_jobs)
year
View(nyc_jobs)
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, year) %>%
distinct() %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
library(tidyverse)
library(haven)
library(readxl)
library(janitor)
library(ggmap)
library(plotly)
library(stringr)
library(wordcloud2)
library(tidytext)
library(forcats)
library(viridis)
library(shiny)
job_positions = nyc_jobs %>%
select(x_of_positions, agency, job_category, salary_mean, year) %>%
distinct() %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
job_positions = nyc_jobs %>%
group_by(job_category, year) %>%
summarise(positions = sum(x_of_positions))
job_positions = nyc_jobs %>%
group_by(job_category) %>%
summarise(positions = sum(x_of_positions))
